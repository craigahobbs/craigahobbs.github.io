# Licensed under the MIT License
# https://github.com/craigahobbs/craigahobbs.github.io/blob/main/LICENSE


async function downloadsMain(javascriptPackages, pythonPackages)
    # Menu
    downloadsPackageMenu(javascriptPackages, 'JavaScript')
    downloadsPackageMenu(pythonPackages, 'Python')
    downloadsWindowMenu(arrayNew(7, 15, 21, 31, 45))

    # Document title
    title = if(vType != null, vType, '') + ' Package Downloads' + if(vName != null, ' - ' + vName, '')
    markdownPrint('', '# ' + title)
    setDocumentTitle(title)

    # Package dashboard
    if(vName != null, downloadsDashboard(vName, vType), markdownPrint('', 'No package selected'))
endfunction


function downloadsPackageMenu(packages, type)
    markdownPrint('', '**' + type + ':**')
    ixPackage = 0
    packageLoop:
        packageName = arrayGet(packages, ixPackage)
        if(ixPackage != 0, markdownPrint('**|**'))
        markdownPrint(if(vName == packageName && vType == type, packageName, '[' + packageName + '](' + downloadsLink(packageName, type) + ')'))
        ixPackage = ixPackage + 1
    jumpif (ixPackage < arrayLength(packages)) packageLoop
endfunction


function downloadsWindowMenu(windows)
    markdownPrint('', '**Window:**')
    ixWindow = 0
    windowLoop:
        window = arrayGet(windows, ixWindow)
        if(ixWindow != 0, markdownPrint('**|**'))
        markdownPrint(if(vWindow == window, window + ' days', '[' + window + ' days](' + downloadsLink(null, null, window) + ')'))
        ixWindow = ixWindow + 1
    jumpif (ixWindow < arrayLength(windows)) windowLoop
endfunction


function downloadsLink(name, type, window)
    name = if(name != null, name, vName)
    type = if(type != null, type, vType)
    window = if(window != null, window, vWindow)
    parts = arrayNew()
    if(name != null, arrayPush(parts, "var.vName='" + name + "'"))
    if(type != null, arrayPush(parts, "var.vType='" + type + "'"))
    if(window != null, arrayPush(parts, 'var.vWindow=' + window))
    return if(arrayLength(parts) == 0, '#var=', '#' + arrayJoin(parts, '&'))
endfunction


async function downloadsDashboard(packageName, type)
    chartWidth = 1000
    chartHeight = 250

    # Load and validate the package data
    data = if(type == 'Python', downloadsPythonPackageData(packageName), downloadsJavascriptPackageData(packageName))

    # Compute the with-mirrors three-week daily running average
    windowSize = if(vWindow != null, vWindow, 21)
    windowSizeHalf = (windowSize - 1) / 2
    ixDay = windowSizeHalf
    dataAvg = arrayNew()
    dataWithMirrors = dataFilter(data, 'category == "with_mirrors"')
    dataSort(dataWithMirrors, arrayNew(arrayNew('date')))
    dayLoop:
        avgSum = 0
        ixDayAvg = ixDay - windowSizeHalf
        dayAvgLoop:
            avgSum = avgSum + objectGet(arrayGet(dataWithMirrors, ixDayAvg), 'downloads')
            ixDayAvg = ixDayAvg + 1
        jumpif (ixDayAvg < ixDay + windowSizeHalf + 1) dayAvgLoop
        arrayPush(dataAvg, objectNew( \
            'date', objectGet(arrayGet(dataWithMirrors, ixDay), 'date'), \
            'downloads', avgSum / windowSize \
        ))
        ixDay = ixDay + 1
    jumpif (ixDay < arrayLength(dataWithMirrors) - windowSizeHalf) dayLoop

    # Render the daily running average chart
    dataLineChart(dataAvg, objectNew( \
        'title', 'Average Daily Downloads (' + windowSize + ' day window) - ' + packageName, \
        'width', chartWidth - mathFloor(1.5 * getTextWidth('with_mirrors', getTextHeight('', 0))), \
        'height', chartHeight, \
        'x', 'date', \
        'y', arrayNew('downloads'), \
        'ytick', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Render the daily line chart
    dataLineChart(data, objectNew( \
        'title', 'Daily Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'date', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'ytick', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Aggregate by month
    dataCalculatedField(data, 'month', 'dateFn(year(date), month(date), 1)', objectNew('dateFn', datetimeNew))
    dataMonth = dataAggregate(data, 'downloads', 'sum', arrayNew('month', 'category'))

    # Render the monthly line chart
    dataLineChart(dataMonth, objectNew( \
        'title', 'Monthly Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'month', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'ytick', objectNew('start', 0), \
        'datetime', 'month', \
        'precision', 0 \
    ))

    # Render the monthly table by most recent
    dataSort(dataMonth, arrayNew(arrayNew('month', true), arrayNew('category')))
    dataTable(dataMonth, objectNew( \
        'categoryFields', arrayNew('month', 'category'), \
        'datetime', 'Month' \
    ))
endfunction


async function downloadsJavascriptPackageData(packageName)
    # Fetch the raw package downloads data
    #today = datetimeToday()
    #yearAgo = datetimeNew(datetimeYear(today) - 1, datetimeMonth(today), datetimeDay(today))
    #dataURL = 'https://npm-stat.com/api/download-counts?package=' + package + \
    #    '&from=' + datetimeISOFormat(yearAgo, true) + '&until=' + datetimeISOFormat(today, true)
    dataURL = 'data/javascript-' + packageName + '.json'
    dataRaw = objectGet(fetch(dataURL), packageName)

    # Reshape the data
    data = arrayNew()
    jumpif (arrayLength(dataRaw) == 0) dataDone
    dates = objectKeys(dataRaw)
    ixDate = 0
    dateLoop:
        date = arrayGet(dates, ixDate)
        arrayPush(data, objectNew( \
            'date', date, \
            'downloads', objectGet(dataRaw, date), \
            'category', 'with_mirrors' \
        ))
        ixDate = ixDate + 1
    jumpif (ixDate < arrayLength(dates)) dateLoop
    dataDone:

    # Validate the data
    return dataValidate(data)
endfunction


async function downloadsPythonPackageData(packageName)
    # Fetch the raw package downloads data
    # dataURL = 'https://pypistats.org/api/packages/' + packageName + '/overall'
    dataURL = 'data/python-' + packageName + '.json'
    data = objectGet(fetch(dataURL), 'data')

    # Validate the data
    return dataValidate(data)
endfunction
