# Licensed under the MIT License
# https://github.com/craigahobbs/craigahobbs.github.io/blob/main/LICENSE


async function downloadsMain(javascriptPackages, pythonPackages)
    if(vName != null, markdownPrint('[Rankings](#var=)'))
    title = if(vName != null, \
        downloadsDashboard(vName, vType), \
        downloadsRankings(javascriptPackages, pythonPackages))
endfunction


async function downloadsRankings(javascriptPackages, pythonPackages)
    # Document title
    title = 'Package Downloads'
    markdownPrint('', '# ' + title)
    setDocumentTitle(title)

    # Compute the list of package raw data URLs
    dataURLs = arrayNew()
    dataInfo = arrayNew()
    packageLists = arrayNew(javascriptPackages, pythonPackages)
    packageTypes = arrayNew('JavaScript', 'Python')
    ixPackageList = 0
    packageListLoop:
        packageList = arrayGet(packageLists, ixPackageList)
        packageType = arrayGet(packageTypes, ixPackageList)
        ixPackage = 0
        packageLoop:
            packageName = arrayGet(packageList, ixPackage)

            # Add the package URL, etc.
            arrayPush(dataURLs, \
                if(packageType == 'Python', downloadsPythonDataURL(packageName), downloadsJavascriptDataURL(packageName)))
            arrayPush(dataInfo, objectNew('packageName', packageName, 'packageType', packageType))

            ixPackage = ixPackage + 1
        jumpif (ixPackage < arrayLength(packageList)) packageLoop
        ixPackageList = ixPackageList + 1
    jumpif (ixPackageList < arrayLength(packageLists)) packageListLoop

    # Fetch the package raw data and validate
    dataRaw = fetch(dataURLs)
    packageData = arrayNew()
    packageFields = arrayNew('Package', 'Language')
    ixPackage = 0
    dataLoop:
        packageName = objectGet(arrayGet(dataInfo, ixPackage), 'packageName')
        packageType = objectGet(arrayGet(dataInfo, ixPackage), 'packageType')
        packageURL = if(packageType == 'Python', \
            'https://pypi.org/project/' + encodeURIComponent(packageName) + '/', \
            'https://www.npmjs.com/package/' + encodeURIComponent(packageName))

        # Validate the data
        data = if(packageType == 'Python', \
            downloadsPythonDataValidate(arrayGet(dataRaw, ixPackage), packageName), \
            downloadsJavascriptDataValidate(arrayGet(dataRaw, ixPackage), packageName))

        # Filter to only "with_mirrors"
        data = dataFilter(data, 'category == "with_mirrors"')

        # Compute the monthly downloads
        dataCalculatedField(data, 'year', 'year(date)')
        dataCalculatedField(data, 'month', 'month(date)')
        monthly = dataAggregate(data, objectNew( \
            'categories', arrayNew('year', 'month'), \
            'measures', arrayNew( \
                objectNew('field', 'downloads', 'function', 'sum') \
            ) \
        ))
        dataSort(monthly, arrayNew(arrayNew('Package'), arrayNew('year', true), arrayNew('month', true)))

        # Add fields for the most recent three months downloads
        ixMonth = 2
        packageRow =  objectNew( \
            'Package', '[' + packageName + '](' + downloadsLink(packageName, packageType) + ')', \
            'Language', '[' + packageType + '](' + packageURL + ')' \
        )
        arrayPush(packageData, packageRow)
        monthLoop:
            monthRow = arrayGet(monthly, ixMonth)
            month = objectGet(monthRow, 'month')
            monthField = objectGet(monthRow, 'year') + '-' + if(month < 10, '0', '') + month
            if(ixPackage == 0, arrayPush(packageFields, monthField))
            objectSet(packageRow, monthField, objectGet(monthRow, 'downloads'))
            ixMonth = ixMonth - 1
        jumpif (ixMonth >= 0) monthLoop

        ixPackage = ixPackage + 1
    jumpif (ixPackage < arrayLength(dataURLs)) dataLoop

    # Render the rankings chart
    dataSort(packageData, arrayNew(arrayNew(arrayGet(packageFields, arrayLength(packageFields) - 1), true)))
    dataTable(packageData, objectNew( \
        'fields', packageFields, \
        'markdown', arrayNew('Package', 'Language') \
    ))
endfunction


async function downloadsDashboard(packageName, packageType)
    # Document title
    title = packageName + ' Downloads'
    markdownPrint('', '# ' + title)
    setDocumentTitle(title)

    # Load and validate the package data
    data = if(packageType == 'Python', \
        downloadsPythonDataValidate(fetch(downloadsPythonDataURL(packageName)), packageName), \
        downloadsJavascriptDataValidate(fetch(downloadsJavascriptDataURL(packageName)), packageName))

    # Render the window size menu
    windowSizes = arrayNew(10, 15, 20, 30)
    windowSize = if(vWindow != null, vWindow, arrayGet(windowSizes, 1))
    markdownPrint('', '**Window:**')
    ixWindow = 0
    windowLoop:
        window = arrayGet(windowSizes, ixWindow)
        if(ixWindow != 0, markdownPrint('|'))
        markdownPrint(if(window == windowSize, window + ' days', '[' + window + ' days](' + downloadsLink(null, null, window) + ')'))
        ixWindow = ixWindow + 1
    jumpif (ixWindow < arrayLength(windowSizes)) windowLoop

    # Compute the with-mirrors three-week daily running average
    ixDay = windowSize
    dataAvg = arrayNew()
    dataWithMirrors = dataFilter(data, 'category == "with_mirrors"')
    dataSort(dataWithMirrors, arrayNew(arrayNew('date')))
    dayLoop:
        avgSum = 0
        ixDayAvg = ixDay - windowSize + 1
        dayAvgLoop:
            avgSum = avgSum + objectGet(arrayGet(dataWithMirrors, ixDayAvg), 'downloads')
            ixDayAvg = ixDayAvg + 1
        jumpif (ixDayAvg <= ixDay) dayAvgLoop
        arrayPush(dataAvg, objectNew( \
            'date', objectGet(arrayGet(dataWithMirrors, ixDay), 'date'), \
            'downloads', avgSum / windowSize \
        ))
        ixDay = ixDay + 1
    jumpif (ixDay < arrayLength(dataWithMirrors)) dayLoop

    # Chart constants
    chartWidth = 1000
    chartHeight = 250

    # Render the daily running average chart
    dataLineChart(dataAvg, objectNew( \
        'title', 'Average Daily Downloads (' + windowSize + ' day window) - ' + packageName, \
        'width', chartWidth - mathFloor(1.5 * getTextWidth('with_mirrors', getTextHeight('', 0))), \
        'height', chartHeight, \
        'x', 'date', \
        'y', arrayNew('downloads'), \
        'yTicks', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Render the daily line chart
    dataLineChart(data, objectNew( \
        'title', 'Daily Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'date', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'yTicks', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Aggregate by month
    dataCalculatedField(data, 'month', 'datetimeNew(year(date), month(date), 1)', objectNew('datetimeNew', datetimeNew))
    monthly = dataAggregate(data, objectNew( \
        'categories', arrayNew('month', 'category'), \
        'measures', arrayNew( \
            objectNew('field', 'downloads', 'function', 'sum') \
        ) \
    ))
    today = datetimeToday()
    currentMonth = datetimeNew(datetimeYear(today), datetimeMonth(today), 1)
    monthlyComplete = dataFilter(monthly, 'month < currentMonth', objectNew('currentMonth', currentMonth))

    # Render the monthly line chart
    dataLineChart(monthlyComplete, objectNew( \
        'title', 'Monthly Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'month', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'yTicks', objectNew('start', 0), \
        'datetime', 'month', \
        'precision', 0 \
    ))

    # Render the monthly table by most recent
    dataSort(monthly, arrayNew(arrayNew('month', true), arrayNew('category')))
    dataTable(monthly, objectNew( \
        'categories', arrayNew('month', 'category'), \
        'datetime', 'month' \
    ))
endfunction


function downloadsLink(name, type, window)
    name = if(name != null, name, vName)
    type = if(type != null, type, vType)
    window = if(window != null, window, vWindow)
    parts = arrayNew()
    if(name != null, arrayPush(parts, "var.vName='" + name + "'"))
    if(type != null, arrayPush(parts, "var.vType='" + type + "'"))
    if(window != null, arrayPush(parts, 'var.vWindow=' + window))
    return if(arrayLength(parts) == 0, '#var=', '#' + arrayJoin(parts, '&'))
endfunction


function downloadsJavascriptDataURL(packageName)
    #today = datetimeToday()
    #yearAgo = datetimeNew(datetimeYear(today) - 1, datetimeMonth(today), datetimeDay(today))
    #return 'https://npm-stat.com/api/download-counts?package=' + package + \
    #    '&from=' + datetimeISOFormat(yearAgo, true) + '&until=' + datetimeISOFormat(today, true)
    return 'data/javascript-' + packageName + '.json'
endfunction


function downloadsJavascriptDataValidate(dataRaw, packageName)
    # Reshape the data
    data = arrayNew()
    downloadDates = objectGet(dataRaw, packageName)
    jumpif (arrayLength(downloadDates) == 0) dataDone
    dates = objectKeys(downloadDates)
    ixDate = 0
    dateLoop:
        date = arrayGet(dates, ixDate)
        arrayPush(data, objectNew( \
            'date', date, \
            'downloads', objectGet(downloadDates, date), \
            'category', 'with_mirrors' \
        ))
        ixDate = ixDate + 1
    jumpif (ixDate < arrayLength(dates)) dateLoop
    dataDone:

    # Validate the data
    return dataValidate(data)
endfunction


function downloadsPythonDataURL(packageName)
    #return 'https://pypistats.org/api/packages/' + packageName + '/overall'
    return 'data/python-' + packageName + '.json'
endfunction


function downloadsPythonDataValidate(dataRaw)
    return dataValidate(objectGet(dataRaw, 'data'))
endfunction
