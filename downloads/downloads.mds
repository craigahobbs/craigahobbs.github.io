# Licensed under the MIT License
# https://github.com/craigahobbs/craigahobbs.github.io/blob/main/LICENSE


async function downloadsMain(javascriptPackages, pythonPackages)
    if(vName != null, markdownPrint('[Rankings](#var=)'))
    title = if(vName != null, \
        downloadsDashboard(vName, vType), \
        downloadsRankings(javascriptPackages, pythonPackages))
endfunction


async function downloadsRankings(javascriptPackages, pythonPackages)
    # Document title
    title = 'Package Downloads'
    markdownPrint('', '# ' + title)
    setDocumentTitle(title)

    # Compute the list of package raw data URLs
    dataURLs = arrayNew()
    dataInfo = arrayNew()
    packageLists = arrayNew(javascriptPackages, pythonPackages)
    packageTypes = arrayNew('JavaScript', 'Python')
    ixPackageList = 0
    packageListLoop:
        packageList = arrayGet(packageLists, ixPackageList)
        packageType = arrayGet(packageTypes, ixPackageList)
        ixPackage = 0
        packageLoop:
            packageName = arrayGet(packageList, ixPackage)

            # Add the package URL, etc.
            arrayPush(dataURLs, \
                if(packageType == 'Python', downloadsPythonDataURL(packageName), downloadsJavascriptDataURL(packageName)))
            arrayPush(dataInfo, objectNew('packageName', packageName, 'packageType', packageType))

            ixPackage = ixPackage + 1
        jumpif (ixPackage < arrayLength(packageList)) packageLoop
        ixPackageList = ixPackageList + 1
    jumpif (ixPackageList < arrayLength(packageLists)) packageListLoop

    # Fetch the package raw data and validate
    dataRaw = fetch(dataURLs)
    packageData = arrayNew()
    ixPackage = 0
    dataLoop:
        packageName = objectGet(arrayGet(dataInfo, ixPackage), 'packageName')
        packageType = objectGet(arrayGet(dataInfo, ixPackage), 'packageType')
        packageURL = if(packageType == 'Python', \
            'https://pypi.org/project/' + encodeURIComponent(packageName) + '/', \
            'https://www.npmjs.com/package/' + encodeURIComponent(packageName))

        # Validate the data
        data = if(packageType == 'Python', \
            downloadsPythonDataValidate(arrayGet(dataRaw, ixPackage), packageName), \
            downloadsJavascriptDataValidate(arrayGet(dataRaw, ixPackage), packageName))

        # Filter to only "with_mirrors"
        data = dataFilter(data, 'category == "with_mirrors"')

        # Compute the average monthly downloads
        dataCalculatedField(data, 'Month', 'datetimeNew(year(date), month(date), 1)', objectNew('datetimeNew', datetimeNew))
        monthly = dataAggregate(data, objectNew( \
            'categories', arrayNew('Month'), \
            'measures', arrayNew( \
                objectNew('field', 'downloads', 'function', 'sum') \
            ) \
        ))
        monthlyAverage = dataAggregate(monthly, objectNew( \
            'measures', arrayNew( \
                objectNew('field', 'downloads', 'function', 'average') \
            ) \
        ))
        arrayPush(packageData, objectNew( \
            'Package', '[' + packageName + '](' + downloadsLink(packageName, packageType) + ')', \
            'Language', '[' + packageType + '](' + packageURL + ')', \
            'Downloads', objectGet(arrayGet(monthlyAverage, 0), 'downloads') \
        ))

        ixPackage = ixPackage + 1
    jumpif (ixPackage < arrayLength(dataURLs)) dataLoop

    # Render the rankings table
    dataSort(packageData, arrayNew(arrayNew('Downloads', true)))
    dataTable(packageData, objectNew( \
        'fields', arrayNew('Package', 'Language', 'Downloads'), \
        'markdown', arrayNew('Package', 'Language'), \
        'precision', 0 \
    ))
endfunction


async function downloadsDashboard(packageName, packageType)
    # Document title
    title = packageName + ' Downloads'
    markdownPrint('', '# ' + title)
    setDocumentTitle(title)

    # Load and validate the package data
    data = if(packageType == 'Python', \
        downloadsPythonDataValidate(fetch(downloadsPythonDataURL(packageName)), packageName), \
        downloadsJavascriptDataValidate(fetch(downloadsJavascriptDataURL(packageName)), packageName))

    # Aggregate by month
    dataCalculatedField(data, 'month', 'datetimeNew(year(date), month(date), 1)', objectNew('datetimeNew', datetimeNew))
    monthly = dataAggregate(data, objectNew( \
        'categories', arrayNew('month', 'category'), \
        'measures', arrayNew( \
            objectNew('field', 'downloads', 'function', 'sum') \
        ) \
    ))
    today = datetimeToday()
    currentMonth = datetimeNew(datetimeYear(today), datetimeMonth(today), 1)
    monthlyComplete = dataFilter(monthly, 'month < currentMonth', objectNew('currentMonth', currentMonth))

    # Chart constants
    chartWidth = 1000
    chartHeight = 250

    # Render the monthly line chart
    dataLineChart(monthlyComplete, objectNew( \
        'title', 'Monthly Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'month', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'yTicks', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Render the daily line chart
    dataLineChart(data, objectNew( \
        'title', 'Daily Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'date', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'yTicks', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Render the monthly table by most recent
    dataSort(monthly, arrayNew(arrayNew('month', true), arrayNew('category')))
    dataTable(monthly, objectNew( \
        'categories', arrayNew('month', 'category'), \
        'fields', arrayNew('downloads'), \
        'datetime', 'month' \
    ))
endfunction


function downloadsLink(name, type, window)
    name = if(name != null, name, vName)
    type = if(type != null, type, vType)
    window = if(window != null, window, vWindow)
    parts = arrayNew()
    if(name != null, arrayPush(parts, "var.vName='" + name + "'"))
    if(type != null, arrayPush(parts, "var.vType='" + type + "'"))
    if(window != null, arrayPush(parts, 'var.vWindow=' + window))
    return if(arrayLength(parts) == 0, '#var=', '#' + arrayJoin(parts, '&'))
endfunction


function downloadsJavascriptDataURL(packageName)
    today = datetimeToday()
    yearAgo = datetimeNew(datetimeYear(today), datetimeMonth(today) - 12, datetimeDay(today))
    return 'https://api.npmjs.org/downloads/range/' + \
        datetimeISOFormat(yearAgo, true) + ':' + datetimeISOFormat(today, true) + '/' + packageName
endfunction


function downloadsJavascriptDataValidate(dataRaw, packageName)
    # Reshape the data
    data = arrayNew()
    downloads = objectGet(dataRaw, 'downloads')
    jumpif (arrayLength(downloads) == 0) dataDone
    ixDownload = 0
    downloadLoop:
        download = arrayGet(downloads, ixDownload)
        arrayPush(data, objectNew( \
            'date', objectGet(download, 'day'), \
            'downloads', objectGet(download, 'downloads'), \
            'category', 'with_mirrors' \
        ))
        ixDownload = ixDownload + 1
    jumpif (ixDownload < arrayLength(downloads)) downloadLoop
    dataDone:

    # Validate the data
    return dataValidate(data)
endfunction


function downloadsPythonDataURL(packageName)
    #return 'https://pypistats.org/api/packages/' + packageName + '/overall'
    return 'data/python-' + packageName + '.json'
endfunction


function downloadsPythonDataValidate(dataRaw)
    return dataValidate(objectGet(dataRaw, 'data'))
endfunction
