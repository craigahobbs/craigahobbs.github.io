# Licensed under the MIT License
# https://github.com/craigahobbs/craigahobbs.github.io/blob/main/LICENSE

include <args.mds>


async function downloadsMain(javascriptPackages, pythonPackages):
    args = argsParse(downloadsArguments)
    name = objectGet(args, 'name')
    type = objectGet(args, 'type')
    if name != null && type != null:
        downloadsDashboard(name, type)
    else:
        downloadsRankings(javascriptPackages, pythonPackages)
    endif
endfunction


downloadsArguments = argsValidate(arrayNew( \
    objectNew('name', 'name', 'explicit', true), \
    objectNew('name', 'type', 'explicit', true) \
))


function downloadsDataURL(packageLanguage, packageName):
    return 'data/' + stringLower(packageLanguage) + '-' + packageName + '.json'
endfunction


async function downloadsRankings(javascriptPackages, pythonPackages):
    # Document title
    title = 'Package Downloads'
    markdownPrint('# ' + markdownEscape(title))
    documentSetTitle(title)

    # Compute the list of package raw data URLs
    dataURLs = arrayNew()
    packages = arrayNew()
    packageLists = arrayNew(javascriptPackages, pythonPackages)
    packageTypes = arrayNew('JavaScript', 'Python')
    for packageType, ixPackageType in packageTypes:
        packageList = arrayGet(packageLists, ixPackageType)
        for packageName in packageList:
            arrayPush(dataURLs, downloadsDataURL(packageType, packageName))
            arrayPush(packages, objectNew('name', packageName, 'type', packageType))
        endfor
    endfor

    # Fetch the package raw data and validate
    dataText = systemFetch(dataURLs)
    packageData = arrayNew()
    totalDownloads = 0
    for package, ixPackage in packages:
        packageName = objectGet(package, 'name')
        packageType = objectGet(package, 'type')

        # Validate the data
        data = dataValidate(jsonParse(arrayGet(dataText, ixPackage)), true)
        if packageType == 'Python':
            packageURL = 'https://pypi.org/project/' + urlEncodeComponent(packageName) + '/'
        else:
            packageURL = 'https://www.npmjs.com/package/' + urlEncodeComponent(packageName)
        endif

        # Add the rankings data row
        packageDownloads = objectGet(downloadsMonthlyData(data), 'monthlyAverage')
        totalDownloads = totalDownloads + packageDownloads
        arrayPush(packageData, objectNew( \
            'Package', argsLink(downloadsArguments, packageName, objectNew('name', packageName, 'type', packageType)), \
            'Language', '[' + markdownEscape(packageType) + '](' + packageURL + ')', \
            'Downloads', packageDownloads \
        ))
    endfor
    dataSort(packageData, arrayNew(arrayNew('Downloads', true)))
    arrayPush(packageData, objectNew('Package', '**Total**', 'Language', '', 'Downloads', totalDownloads))

    # Render the rankings table
    dataTable(packageData, objectNew( \
        'fields', arrayNew('Package', 'Language', 'Downloads'), \
        'formats', objectNew( \
            'Package', objectNew('markdown', true), \
            'Language', objectNew('markdown', true) \
        ), \
        'precision', 0 \
    ))
endfunction


async function downloadsDashboard(packageName, packageType):
    # Document title
    title = packageName + ' (' + packageType + ') Downloads'
    markdownPrint( \
        argsLink(downloadsArguments, 'Rankings'), \
        '', \
        '# ' + markdownEscape(title) \
    )
    documentSetTitle(title)

    # Load and validate the package data
    data = dataValidate(jsonParse(systemFetch(downloadsDataURL(packageType, packageName))), true)

    # Compute the monthly data and averages
    monthly = downloadsMonthlyData(data)
    dataTrim = objectGet(monthly, 'dataTrim')
    dataClean = objectGet(monthly, 'dataClean')
    dataMonthly = objectGet(monthly, 'dataMonthly')

    # Chart constants
    chartWidth = 1000
    chartHeight = 250

    # Render the monthly line chart
    dataLineChart(dataMonthly, objectNew( \
        'title', 'Monthly Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'Month', \
        'y', arrayNew('Downloads'), \
        'yTicks', objectNew('start', 0), \
        'yLines', arrayNew( \
            objectNew('value', objectGet(monthly, 'monthlyAverage')) \
        ), \
        'datetime', 'day', \
        'precision', 1 \
    ))

    # Render the daily line chart (clean)
    dataLineChart(dataClean, objectNew( \
        'title', 'Daily Downloads (clean) - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'Date', \
        'y', arrayNew('Downloads'), \
        'yTicks', objectNew('start', 0), \
        'yLines', arrayNew( \
            objectNew('value', objectGet(monthly, 'dailyAverageClean')) \
        ), \
        'datetime', 'day', \
        'precision', 1 \
    ))

    # Render the daily line chart
    dataLineChart(dataTrim, objectNew( \
        'title', 'Daily Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'Date', \
        'y', arrayNew('Downloads'), \
        'yTicks', objectNew('start', 0), \
        'yLines', arrayNew( \
            objectNew('value', objectGet(monthly, 'dailyAverage')) \
        ), \
        'datetime', 'day', \
        'precision', 1 \
    ))

    # Render the monthly table by most recent
    dataSort(dataMonthly, arrayNew(arrayNew('Month', true)))
    dataTable(dataMonthly, objectNew( \
        'fields', arrayNew('Month', 'Downloads', '% Average', 'Projected'), \
        'formats', objectNew( \
            'Downloads', objectNew('align', 'right'), \
            '% Average', objectNew('align', 'right') \
        ), \
        'datetime', 'month' \
    ))
endfunction


function downloadsMonthlyData(data):
    # Trim leading and trailing zero-download days
    ixFirstNonZero = null
    ixLastNonZero = arrayLength(data) - 1
    for row, ixRow in dataSort(data, arrayNew(arrayNew('Date'))):
        ixFirstNonZero = if(ixFirstNonZero == null && objectGet(row, 'Downloads') != 0, ixRow, ixFirstNonZero)
        ixLastNonZero = if(objectGet(row, 'Downloads') != 0, ixRow, ixLastNonZero)
    endfor
    dataTrim = arraySlice(data, if(ixFirstNonZero != null, ixFirstNonZero, 0), ixLastNonZero + 1)

    # Replace extreme outliers with a filtered average
    dataStddev = dataAggregate(dataTrim, objectNew( \
        'measures', arrayNew( \
            objectNew('field', 'Downloads', 'name', 'downloadsStddev', 'function', 'stddev'), \
            objectNew('field', 'Downloads', 'name', 'downloadsAverage', 'function', 'average') \
        ) \
    ))
    dailyAverage = objectGet(arrayGet(dataStddev, 0), 'downloadsAverage')
    downloadsMax = dailyAverage + 4 * objectGet(arrayGet(dataStddev, 0), 'downloadsStddev')
    dataClean = arrayNew()
    for row in dataTrim:
        rowClean = objectCopy(row)
        if objectGet(row, 'Downloads') > downloadsMax:
            objectSet(rowClean, 'Downloads', null)
        endif
        arrayPush(dataClean, rowClean)
    endfor
    dataCleanAverage = dataAggregate(dataClean, objectNew( \
        'measures', arrayNew( \
            objectNew('field', 'Downloads', 'name', 'downloadsAverage', 'function', 'average') \
        ) \
    ))
    dailyAverageClean = mathRound(objectGet(arrayGet(dataCleanAverage, 0), 'downloadsAverage'), 0)
    for rowClean in dataClean:
        if objectGet(rowClean, 'Downloads') == null:
            objectSet(rowClean, 'Downloads', dailyAverageClean)
        endif
    endfor

    # Compute the monthly download data
    dataCalculatedField(dataClean, 'Month', 'datetimeNew(year(Date), datetimeMonth(Date), 1)')
    dataCalculatedField(dataClean, 'monthDay', 'datetimeDay(Date)')
    dataMonthly = dataAggregate(dataClean, objectNew( \
        'categories', arrayNew('Month'), \
        'measures', arrayNew( \
            objectNew('field', 'Downloads', 'function', 'sum'), \
            objectNew('field', 'monthDay', 'name', 'monthDayMin', 'function', 'min'), \
            objectNew('field', 'monthDay', 'name', 'monthDayMax', 'function', 'max') \
        ) \
    ))
    dataCalculatedField(dataMonthly, 'monthCount', 'monthDayMax - monthDayMin + 1')

    # Adjust downloads for partial months
    dataMinMax = dataAggregate(dataClean, objectNew( \
        'measures', arrayNew( \
            objectNew('field', 'Month', 'name', 'monthMin', 'function', 'min'), \
            objectNew('field', 'Month', 'name', 'monthMax', 'function', 'max') \
        ) \
    ))
    dataMonthly = dataFilter(dataMonthly, \
        '(Month - monthMin != 0 && Month - monthMax != 0) || monthCount >= 5', \
        arrayGet(dataMinMax, 0) \
    )
    dataCalculatedField(dataMonthly, 'monthDays', 'arrayGet(monthDays, datetimeMonth(Month) - 1)', objectNew( \
        'monthDays', arrayNew(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) \
    ))
    dataCalculatedField(dataMonthly, 'Projected', \
        "if((Month - monthMin == 0 || Month - monthMax == 0) && monthCount < monthDays, '*', '')", \
        arrayGet(dataMinMax, 0) \
    )
    dataCalculatedField(dataMonthly, 'Downloads', \
        "if(Projected == '', Downloads, round(Downloads * monthDays / monthCount, 0))", \
        arrayGet(dataMinMax, 0) \
    )

    # Compute the monthly average
    dataAverage = dataAggregate(dataMonthly, objectNew( \
        'measures', arrayNew( \
            objectNew('field', 'Downloads', 'function', 'average') \
        ) \
    ))
    monthlyAverage = objectGet(arrayGet(dataAverage, 0), 'Downloads')

    # Add the percentage-of-average field
    dataCalculatedField( \
        dataMonthly, \
        '% Average', \
        "if(monthlyAverage, numberToFixed(100 * (Downloads - monthlyAverage) / monthlyAverage, 1) + '%', '')", \
        objectNew('monthlyAverage', monthlyAverage) \
    )

    return objectNew( \
        'dataTrim', dataTrim, \
        'dataClean', dataClean, \
        'dataMonthly', dataMonthly, \
        'monthlyAverage', monthlyAverage, \
        'dailyAverage', dailyAverage, \
        'dailyAverageClean', dailyAverageClean \
    )
endfunction
