# Licensed under the MIT License
# https://github.com/craigahobbs/craigahobbs.github.io/blob/main/LICENSE

include <args.mds>


async function downloadsMain(javascriptPackages, pythonPackages):
    args = argsParse(downloadsArguments)
    name = objectGet(args, 'name')
    type = objectGet(args, 'type')
    if name != null && type != null:
        downloadsDashboard(name, type)
    else:
        downloadsRankings(javascriptPackages, pythonPackages)
    endif
endfunction


downloadsArguments = argsValidate(arrayNew( \
    objectNew('name', 'name', 'explicit', true), \
    objectNew('name', 'type', 'explicit', true) \
))


async function downloadsRankings(javascriptPackages, pythonPackages):
    # Document title
    title = 'Package Downloads'
    markdownPrint('# ' + markdownEscape(title))
    documentSetTitle(title)

    # Compute the list of package raw data URLs
    dataURLs = arrayNew()
    packages = arrayNew()
    packageLists = arrayNew(javascriptPackages, pythonPackages)
    packageTypes = arrayNew('JavaScript', 'Python')
    for packageType, ixPackageType in packageTypes:
        packageList = arrayGet(packageLists, ixPackageType)
        for packageName in packageList:
            if packageType == 'Python':
                arrayPush(dataURLs, downloadsPythonDataURL(packageName))
            else:
                arrayPush(dataURLs, downloadsJavascriptDataURL(packageName))
            endif
            arrayPush(packages, objectNew('name', packageName, 'type', packageType))
        endfor
    endfor

    # Fetch the package raw data and validate
    dataRaw = systemFetch(dataURLs)
    packageData = arrayNew()
    for package, ixPackage in packages:
        packageName = objectGet(package, 'name')
        packageType = objectGet(package, 'type')

        # Validate the data
        if packageType == 'Python':
            data = downloadsPythonDataValidate(arrayGet(dataRaw, ixPackage))
            packageURL = 'https://pypi.org/project/' + urlEncodeComponent(packageName) + '/'
        else:
            data = downloadsJavascriptDataValidate(arrayGet(dataRaw, ixPackage))
            packageURL = 'https://www.npmjs.com/package/' + urlEncodeComponent(packageName)
        endif

        # Add the rankings data row
        arrayPush(packageData, objectNew( \
            'Package', argsLink(downloadsArguments, packageName, objectNew('name', packageName, 'type', packageType)), \
            'Language', '[' + markdownEscape(packageType) + '](' + packageURL + ')', \
            'Monthly Downloads', objectGet(downloadsMonthlyData(data), 'monthlyAverage') \
        ))
    endfor

    # Render the rankings table
    dataSort(packageData, arrayNew(arrayNew('Monthly Downloads', true)))
    dataTable(packageData, objectNew( \
        'fields', arrayNew('Package', 'Language', 'Monthly Downloads'), \
        'formats', objectNew( \
            'Package', objectNew('markdown', true), \
            'Language', objectNew('markdown', true) \
        ), \
        'precision', 0 \
    ))
endfunction


async function downloadsDashboard(packageName, packageType):
    # Document title
    title = packageName + ' (' + packageType + ') Downloads'
    markdownPrint( \
        argsLink(downloadsArguments, 'Rankings'), \
        '', \
        '# ' + markdownEscape(title) \
    )
    documentSetTitle(title)

    # Load and validate the package data
    if packageType == 'Python':
        data = downloadsPythonDataValidate(systemFetch(downloadsPythonDataURL(packageName)))
    else:
        data = downloadsJavascriptDataValidate(systemFetch(downloadsJavascriptDataURL(packageName)))
    endif

    # Compute the monthly data and averages
    monthly = downloadsMonthlyData(data)
    dataMonthly = objectGet(monthly, 'dataMonthly')
    dataMonthlyComplete = objectGet(monthly, 'dataMonthlyComplete')

    # Chart constants
    chartWidth = 1000
    chartHeight = 250

    # Render the monthly line chart
    dataLineChart(dataMonthlyComplete, objectNew( \
        'title', 'Monthly Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'month', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'yTicks', objectNew('start', 0), \
        'yLines', arrayNew( \
            objectNew('value', objectGet(monthly, 'monthlyAverage')) \
        ), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Render the daily line chart
    dataLineChart(data, objectNew( \
        'title', 'Daily Downloads - ' + packageName, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'date', \
        'y', arrayNew('downloads'), \
        'color', 'category', \
        'yTicks', objectNew('start', 0), \
        'datetime', 'day', \
        'precision', 0 \
    ))

    # Render the monthly table by most recent
    dataSort(dataMonthly, arrayNew(arrayNew('month', true), arrayNew('category')))
    dataTable(dataMonthly, objectNew( \
        'categories', arrayNew('month', 'category'), \
        'fields', arrayNew('downloads', '%avg'), \
        'formats', objectNew( \
            'downloads', objectNew('align', 'right') \
        ), \
        'datetime', 'month' \
    ))
endfunction


function downloadsMonthlyData(data):
    # Add month/year calculated field
    dataCalculatedField(data, 'month', 'datetimeNew(year(date), month(date), 1)')

    # Compute the average monthly download data
    dataMonthly = dataAggregate(data, objectNew( \
        'categories', arrayNew('month', 'category'), \
        'measures', arrayNew( \
            objectNew('field', 'downloads', 'function', 'sum') \
        ) \
    ))

    # Exclude the first month of data if its incomplete
    dataMinDate = dataAggregate(data, objectNew( \
        'measures', arrayNew( \
            objectNew('field', 'date', 'function', 'min') \
        ) \
    ))
    minDate = objectGet(arrayGet(dataMinDate, 0), 'date')
    if datetimeDay(minDate) != 1:
        dataMonthlyComplete = dataFilter(dataMonthly, 'datetimeYear(month) != minYear || datetimeMonth(month) != minMonth', \
            objectNew('minMonth', datetimeMonth(minDate), 'minYear', datetimeYear(minDate)))
    else:
        dataMonthlyComplete = dataMonthly
    endif

    # Exclude the current month of data
    dataMonthlyComplete = dataFilter(dataMonthlyComplete, 'datetimeYear(month) != curYear || datetimeMonth(month) != curMonth', \
        objectNew('curMonth', datetimeMonth(datetimeNow()), 'curYear', datetimeYear(datetimeNow())))

    # Compute the monthly average (excluding current month)
    dataWithMirrors = dataFilter(dataMonthlyComplete, "category == 'with_mirrors'")
    dataAverage = dataAggregate(dataWithMirrors, objectNew( \
        'measures', arrayNew( \
            objectNew('field', 'downloads', 'function', 'average') \
        ) \
    ))
    monthlyAverage = objectGet(arrayGet(dataAverage, 0), 'downloads')

    # Add the percentage-of-average field
    dataCalculatedField( \
        dataMonthly, \
        '%avg', \
        "if(category == 'with_mirrors' && monthlyAverage, numberToFixed(100 * (downloads - monthlyAverage) / monthlyAverage, 1) + '%', '')", \
        objectNew('monthlyAverage', monthlyAverage) \
    )

    return objectNew( \
        'dataMonthly', dataMonthly, \
        'dataMonthlyComplete', dataMonthlyComplete, \
        'monthlyAverage', monthlyAverage \
    )
endfunction


function downloadsJavascriptDataURL(packageName):
    today = datetimeToday()
    yearAgo = datetimeNew(datetimeYear(today), datetimeMonth(today) - 12, 1)
    return 'https://api.npmjs.org/downloads/range/' + \
        datetimeISOFormat(yearAgo, true) + ':' + datetimeISOFormat(today, true) + '/' + packageName
endfunction


function downloadsJavascriptDataValidate(dataRaw):
    # Reshape the data
    data = arrayNew()
    downloads = objectGet(dataRaw, 'downloads')
    for download in downloads:
        arrayPush(data, objectNew( \
            'date', objectGet(download, 'day'), \
            'downloads', objectGet(download, 'downloads'), \
            'category', 'with_mirrors' \
        ))
    endfor

    # Validate the data
    return dataValidate(data)
endfunction


function downloadsPythonDataURL(packageName):
    #return 'https://pypistats.org/api/packages/' + packageName + '/overall'
    return 'data/python-' + packageName + '.json'
endfunction


function downloadsPythonDataValidate(dataRaw):
    return dataValidate(objectGet(dataRaw, 'data'))
endfunction
