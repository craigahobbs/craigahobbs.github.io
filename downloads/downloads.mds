# Licensed under the MIT License
# https://github.com/craigahobbs/craigahobbs.github.io/blob/main/LICENSE

include <args.mds>


async function downloadsMain():
    args = argsParse(downloadsArguments)
    page = objectGet(args, 'page')
    name = objectGet(args, 'name')
    language = objectGet(args, 'language')

    # Chart page?
    if page == 'chart':
        return downloadsChartPage(args)
    endif

    # Package dashboard?
    if name != null && language != null:
        return downloadsDashboard(args)
    endif

    # Render the index page
    downloadsIndex(args)
endfunction


downloadsArguments = argsValidate(arrayNew( \
    objectNew('name', 'page'), \
    objectNew('name', 'name'), \
    objectNew('name', 'language'), \
    objectNew('name', 'currentMonth', 'type', 'bool', 'default', false) \
))


function downloadsCurrentMonthMarkdown(includeCurrentMonth):
    return '**Current Month:** ' + \
        argsLink(downloadsArguments, if(includeCurrentMonth, 'Included', 'Excluded'), objectNew('currentMonth', !includeCurrentMonth))
endfunction


async function downloadsIndex(args):
    includeCurrentMonth = objectGet(args, 'currentMonth')

    # Document title
    title = 'Package Downloads'
    markdownPrint( \
        '# ' + markdownEscape(title), \
        '', \
        downloadsCurrentMonthMarkdown(includeCurrentMonth), \
        '', \
        argsLink(downloadsArguments, 'Time Chart', objectNew('page', 'chart')) \
    )
    documentSetTitle(title)

    # Load the package data
    data = dataValidate(jsonParse(systemFetch('downloads.json')), true)
    dataMonthly = downloadsDataMonthly(data, includeCurrentMonth)
    dataAverage = downloadsDataAverage(dataMonthly, 'Month')

    # Create links and compute total downloads
    totalDownloads = 0
    for row in dataAverage:
        rowPackage = objectGet(row, 'Package')
        rowLanguage = objectGet(row, 'Language')
        totalDownloads = totalDownloads + objectGet(row, 'Downloads')

        # Package page link
        objectSet(row, 'Package', argsLink(downloadsArguments, rowPackage, objectNew('name', rowPackage, 'language', rowLanguage)))

        # Package repository link
        if rowLanguage == 'Python':
            packageURL = 'https://pypi.org/project/' + urlEncodeComponent(rowPackage) + '/'
        else:
            packageURL = 'https://www.npmjs.com/package/' + urlEncodeComponent(rowPackage)
        endif
        objectSet(row, 'Language', '[' + markdownEscape(rowLanguage) + '](' + packageURL + ')')
    endfor
    dataSort(dataAverage, arrayNew(arrayNew('Downloads', true)))
    arrayPush(dataAverage, objectNew('Package', '**Total**', 'Language', '', 'Downloads', totalDownloads))

    # Render the package downloads table
    dataTable(dataAverage, objectNew( \
        'fields', arrayNew('Package', 'Language', 'Downloads'), \
        'formats', objectNew( \
            'Package', objectNew('markdown', true), \
            'Language', objectNew('markdown', true), \
            'Downloads', objectNew('align', 'right') \
        ), \
        'precision', 0 \
    ))
endfunction


async function downloadsChartPage(args):
    includeCurrentMonth = objectGet(args, 'currentMonth')

    # Render the title
    title = 'Downloads Chart'
    documentSetTitle(title)
    markdownPrint( \
        argsLink(downloadsArguments, 'Back', objectNew('page', null)), \
        '', \
        '# ' + markdownEscape(title), \
        '', \
        downloadsCurrentMonthMarkdown(includeCurrentMonth) \
    )

    # Aggregate monthly and determine the color legend order
    dataMonthly = downloadsDataMonthly(downloadsDataLoad(), includeCurrentMonth)
    dataAverage = downloadsDataAverage(dataMonthly, 'Month')
    dataSort(dataAverage, arrayNew(arrayNew('Downloads', true)))
    colorOrder = arrayNew()
    for row in dataAverage:
        arrayPush(colorOrder, objectGet(row, 'Unique'))
    endfor

    # Create the chart
    chartWidth = mathFloor(mathMax(600, windowWidth() - 4 * documentFontSize()))
    chartHeight = mathFloor(0.4 * chartWidth)
    dataLineChart(dataMonthly, objectNew( \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'Month', \
        'y', arrayNew('Downloads'), \
        'color', 'Unique', \
        'colorOrder', colorOrder, \
        'yTicks', objectNew('start', 0, 'count', 5), \
        'precision', 0, \
        'datetime', 'day' \
    ))

    # Redraw on resize
    windowSetResize(systemPartial(downloadsChartPage, args))
endfunction


async function downloadsDashboard(args):
    name = objectGet(args, 'name')
    language = objectGet(args, 'language')
    includeCurrentMonth = objectGet(args, 'currentMonth')

    # Document title
    title = name + ' (' + language + ') Downloads'
    markdownPrint( \
        argsLink(downloadsArguments, 'Back', objectNew('name', null, 'language', null)), \
        '', \
        '# ' + markdownEscape(title), \
        '', \
        downloadsCurrentMonthMarkdown(includeCurrentMonth) \
    )
    documentSetTitle(title)

    # Load the package data
    data = downloadsDataLoad()
    data = dataFilter( \
        data, \
        'Package == packageName && Language == packageLanguage', \
        objectNew('packageName', name, 'packageLanguage', language) \
    )
    dataMonthly = downloadsDataMonthly(data, includeCurrentMonth)

    # Render the monthly line chart
    chartWidth = mathFloor(mathMax(600, windowWidth() - 4 * documentFontSize()))
    chartHeight = mathFloor(mathMax(200, mathFloor(0.2 * chartWidth)))
    monthlyAverage = mathRound(objectGet(arrayGet(downloadsDataAverage(dataMonthly, 'Month'), 0), 'Downloads'))
    minDate = downloadsDataAverageMinDate()
    dataLineChart(dataMonthly, objectNew( \
        'title', 'Monthly Downloads - ' + name, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'Month', \
        'y', arrayNew('Downloads'), \
        'yTicks', objectNew('start', 0), \
        'xLines', arrayNew( \
            objectNew('value', minDate, 'label', '') \
        ), \
        'yLines', arrayNew( \
            objectNew('value', monthlyAverage) \
        ), \
        'datetime', 'day', \
        'precision', 1 \
    ))

    # Render the daily line chart (clean)
    dailyAverage = mathRound(objectGet(arrayGet(downloadsDataAverage(data, 'Date'), 0), 'Downloads'))
    dataLineChart(data, objectNew( \
        'title', 'Daily Downloads (clean) - ' + name, \
        'width', chartWidth, \
        'height', chartHeight, \
        'x', 'Date', \
        'y', arrayNew('Downloads'), \
        'yTicks', objectNew('start', 0), \
        'xLines', arrayNew( \
            objectNew('value', minDate, 'label', '') \
        ), \
        'yLines', arrayNew( \
            objectNew('value', dailyAverage) \
        ), \
        'datetime', 'day', \
        'precision', 1 \
    ))

    # Render the monthly table by most recent
    dataSort(dataMonthly, arrayNew(arrayNew('Month', true)))
    dataCalculatedField( \
        dataMonthly, \
        '% Average', 'numberToFixed((100 * (Downloads - monthlyAverage) / monthlyAverage), 1, true) + "%"', \
        objectNew('monthlyAverage', monthlyAverage) \
    )
    dataTable(dataMonthly, objectNew( \
        'fields', arrayNew('Month', 'Downloads', '% Average'), \
        'formats', objectNew( \
            'Downloads', objectNew('align', 'right') \
        ), \
        'datetime', 'month', \
        'precision', 0 \
    ))

    # Redraw on resize
    windowSetResize(systemPartial(downloadsDashboard, args))
endfunction


async function downloadsDataLoad():
    data = dataValidate(jsonParse(systemFetch('downloads.json')), true)

    # Compute the unique package names
    nameLanguages = objectNew()
    for row in data:
        name = objectGet(row, 'Package')
        language = objectGet(row, 'Language')
        languages = objectGet(nameLanguages, name)
        if !languages:
            objectSet(nameLanguages, name, objectNew(language, true))
        else:
            objectSet(languages, language, true)
        endif
    endfor
    for row in data:
        name = objectGet(row, 'Package')
        language = objectGet(row, 'Language')
        if arrayLength(objectKeys(objectGet(nameLanguages, name))) == 1:
            objectSet(row, 'Unique', name)
        elif language == 'Python':
            objectSet(row, 'Unique', name + ' (py)')
        else:
            objectSet(row, 'Unique', name + ' (js)')
        endif
    endfor

    return data
endfunction


function downloadsDataMonthly(data, includeCurrentMonth):
    # Filter-out the current month
    if includeCurrentMonth:
        dataFiltered = data
    else:
        today = datetimeToday()
        maxDate = datetimeNew(datetimeYear(today), datetimeMonth(today), 1)
        dataFiltered = dataFilter(data, 'Date < maxDate', objectNew('maxDate', maxDate))
    endif

    # Compute the month field
    dataCalculatedField(dataFiltered, 'Month', 'datetimeISOParse(stringSlice(datetimeISOFormat(Date, true), 0, 7) + "-01")')

    # Aggregate by month
    return dataAggregate(dataFiltered, objectNew( \
        'categories', arrayNew('Language', 'Package', 'Unique', 'Month'), \
        'measures', arrayNew( \
            objectNew( \
                'field', 'Downloads', \
                'function', 'sum' \
            ) \
        ) \
    ))
endfunction


function downloadsDataAverage(data, dateField):
    # Filter the data
    dataFiltered = dataFilter(data, dateField + ' >= minDate', objectNew('minDate', downloadsDataAverageMinDate()))

    # Compute the average
    return dataAggregate(dataFiltered, objectNew( \
        'categories', arrayNew('Language', 'Package', 'Unique'), \
        'measures', arrayNew( \
            objectNew('field', 'Downloads', 'function', 'average') \
        ) \
    ))
endfunction


function downloadsDataAverageMinDate():
    monthCount = 3
    today = datetimeToday()
    return datetimeNew(datetimeYear(today), datetimeMonth(today) - monthCount, 1)
endfunction
