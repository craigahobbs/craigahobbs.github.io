include <args.bare>
include <forms.bare>


async function emojiMain():
    # Parse arguments
    arguments = argsValidate(arrayNew( \
        objectNew('name', 'url', 'global', 'vURL', 'default', 'emoji.json', \
                  'description', 'The Emoji JSON configuration file URL'), \
        objectNew('name', 'category', \
                  'description', 'The selected emoji category name'), \
        objectNew('name', 'copied', 'type', 'int', 'explicit', true, \
                  'description', 'The most-recently copied emoji index'), \
        objectNew('name', 'config', 'type', 'bool', 'explicit', true, \
                  'description', 'If true, display the Emoji JSON configuration file format'), \
        objectNew('name', 'help', 'type', 'bool', 'explicit', true, \
                  'description', 'If true, display the Emoji application arguments documentation'), \
        objectNew('name', 'json', 'global', 'vJSON', 'type', 'bool', 'explicit', true, \
                  'description', 'If true, display the Emoji JSON') \
    ))
    args = argsParse(arguments)
    url = objectGet(args, 'url')
    category = objectGet(args, 'category')
    copiedIndex = objectGet(args, 'copied')

    # Load the emojis
    emojiConfigJSON = systemFetch(url)
    emojiConfigObj = if(emojiConfigJSON, jsonParse(emojiConfigJSON))
    emojiConfig = if(emojiConfigObj, schemaValidate(emojiTypes, 'EmojiConfig', emojiConfigObj))
    if !emojiConfig:
        markdownPrint('**ERROR:** Failed to load "' + markdownEscape(url) + '"')
        return
    endif
    emojiCategories = objectGet(emojiConfig, 'categories')

    # Config file documentation?
    if objectGet(args, 'config'):
        # Render the menu
        markdownPrint('[Back](' + emojiAboutURL + ')')
        documentSetTitle('EmojiConfig')

        # Render the configuration schema documentation
        elementModelRender(schemaElements(emojiTypes, 'EmojiConfig'))
        return
    endif

    # Help?
    if objectGet(args, 'help'):
        # Render the title
        title = 'Emoji Arguments'
        markdownPrint('[Back](' + emojiAboutURL + ')', '', '# ' + markdownEscape(title))
        documentSetTitle(title)

        # Render the arguments documention
        argsHelp(arguments)
        return
    endif

    # JSON?
    if objectGet(args, 'json'):
        # Render the title
        title = 'Emoji JSON'
        markdownPrint('[Back](' + emojiAboutURL + ')', '', '# ' + markdownEscape(title))
        documentSetTitle(title)

        # Render the emoji JSON
        markdownPrint('', '```json', jsonStringify(emojiConfig, 4), '```')
        return
    endif

    # Category page
    if category:
        # Validate the category name
        emojiCategory = objectGet(emojiCategories, category)
        if !emojiCategory:
            markdownPrint('**ERROR:** Unknown emoji category "' + markdownEscape(category) + '"')
            return
        endif
        emojiList = arraySort(objectGet(emojiCategory, 'emojis'), emojiCompare)

        # Render the title
        title = 'Emoji - ' + category
        markdownPrint(argsLink(arguments, 'Back', objectNew('category', null)), '', '# ' + markdownEscape(title))
        documentSetTitle(title)

        # Render the list of emoji
        elem = arrayNew()
        valign = 'vertical-align:middle;'
        for emoji, ixEmoji in emojiList:
            emojiChar = objectGet(emoji, 'emoji')
            emojiName = objectGet(emoji, 'name')
            emojiStyle = valign + 'font-size:32pt; padding-right:0.25em; cursor: pointer; user-select: none; text-decoration: none;'
            copyCallback = systemPartial(emojiCopyClipboard, emojiChar, argsURL(arguments, objectNew('copied', ixEmoji)))
            arrayPush(elem, objectNew( \
                'html', 'p', \
                'elem', arrayNew( \
                    objectNew( \
                        'html', 'a', \
                        'attr', objectNew('style', emojiStyle), \
                        'elem', objectNew('text', emojiChar), \
                        'callback', objectNew('click', copyCallback) \
                    ), \
                    objectNew( \
                        'html', 'span', \
                        'attr', objectNew('style', valign), \
                        'elem', arrayNew( \
                            formsLinkButtonElements(emojiName, copyCallback), \
                            if(copiedIndex == ixEmoji, objectNew('text', ' (copied)')) \
                        ) \
                    ) \
                ) \
            ))
        endfor
        elementModelRender(elem)
        return
    endif

    # Index page
    title = 'Emoji'
    markdownPrint('[About](' + emojiAboutURL + ')', '', '# ' + markdownEscape(title))
    documentSetTitle(title)

    # Render the emoji category list
    categories = arraySort(objectKeys(emojiCategories))
    for category in categories:
        markdownPrint('', argsLink(arguments, category, objectNew('category', category)))
    endfor
endfunction


emojiAboutURL = 'https://craigahobbs.github.io/emoji/#url=README.md'


function emojiCompare(a, b):
    return systemCompare(objectGet(a, 'name'), objectGet(b, 'name'))
endfunction


async function emojiCopyClipboard(text, url):
    windowClipboardWrite(text)
    windowSetLocation(url)
endfunction


emojiTypes = schemaParse( \
    '# The Emoji JSON configuration file format', \
    'struct EmojiConfig', \
    '', \
    '    # The list of emoji categories' , \
    '    EmojiCategory{} categories', \
    '', \
    '', \
    '# An emoji category', \
    'struct EmojiCategory', \
    '', \
    '    # The list of emojis', \
    '    Emoji[] emojis', \
    '', \
    '', \
    '# An emoji', \
    'struct Emoji', \
    '', \
    '    # The emoji character', \
    '    string emoji', \
    '', \
    "    # The emoji's name", \
    '    string name' \
)
